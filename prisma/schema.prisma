// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Season {
  id         Int         @id @default(autoincrement())
  name       String
  dishes     Dish[]      @relation("DishToSeason")
  vegetables Vegetable[] @relation("VegetableToSeason")
}

model Dish {
  id      Int      @id @default(autoincrement())
  name    String
  seasons Season[] @relation("DishToSeason")
  userId  String?
  User    User?    @relation(fields: [userId], references: [id])
}

model Vegetable {
  id      Int      @id @default(autoincrement())
  name    String
  seasons Season[] @relation("VegetableToSeason")
  userId  String?
  User    User?    @relation(fields: [userId], references: [id])
}

// NextAuth Schema

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  OWNER
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?   @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role UserRole @default(USER)

  accounts  Account[]
  sessions  Session[]
  Dish      Dish[]
  Vegetable Vegetable[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
